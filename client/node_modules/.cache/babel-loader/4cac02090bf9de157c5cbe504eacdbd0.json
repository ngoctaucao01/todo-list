{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const resp = await fetch(\"http://localhost:7000/todos\");\n\n  if (resp.ok) {\n    const todos = await resp.json();\n    return {\n      todos\n    };\n  }\n});\nexport const addTodoAsync = createAsyncThunk(\"todos/addTodoAsync\", async payload => {\n  const resp = await fetch(\"http://localhost:7000/todos\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      title: payload.title\n    })\n  });\n\n  if (resp.ok) {\n    const todo = await resp.json();\n    return {\n      todo\n    };\n  }\n});\nexport const toggleCompleteAsync = createAsyncThunk(\"todos/completeTodoAsync\", async payload => {\n  const resp = await fetch(`http://localhost:7000/todos/${payload.id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      completed: payload.completed\n    })\n  });\n\n  if (resp.ok) {\n    const todo = await resp.json();\n    return {\n      todo\n    };\n  }\n});\nexport const todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully...\");\n      return action.payload.todos;\n    },\n    [addTodoAsync.fulfilled]: (state, action) => {\n      state.push(action.payload.todo);\n    },\n    [toggleCompleteAsync.fulfilled]: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.todo.id);\n      state[index].completed = action.payload.todo.completed;\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/ngoctaucao/OneDrive/Desktop/projects/todolist-app/client/src/redux/todoSlice.js"],"names":["createAsyncThunk","createSlice","getTodosAsync","resp","fetch","ok","todos","json","addTodoAsync","payload","method","headers","body","JSON","stringify","title","todo","toggleCompleteAsync","id","completed","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","Date","now","push","toggleComplete","index","findIndex","deleteTodo","filter","extraReducers","fulfilled","console","log","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,qBAD2C,EAE3C,YAAY;AACV,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAxB;;AACA,MAAID,IAAI,CAACE,EAAT,EAAa;AACX,UAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAL,EAApB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD;AACF,CAR0C,CAAtC;AAWP,OAAO,MAAME,YAAY,GAAGR,gBAAgB,CAC1C,oBAD0C,EAE1C,MAAOS,OAAP,IAAmB;AACjB,QAAMN,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACtDM,IAAAA,MAAM,EAAE,MAD8C;AAEtDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF6C;AAKtDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,EAAEN,OAAO,CAACM;AAAjB,KAAf;AALgD,GAAhC,CAAxB;;AAQA,MAAIZ,IAAI,CAACE,EAAT,EAAa;AACX,UAAMW,IAAI,GAAG,MAAMb,IAAI,CAACI,IAAL,EAAnB;AACA,WAAO;AAAES,MAAAA;AAAF,KAAP;AACD;AACF,CAfyC,CAArC;AAkBP,OAAO,MAAMC,mBAAmB,GAAGjB,gBAAgB,CACjD,yBADiD,EAEjD,MAAOS,OAAP,IAAmB;AACjB,QAAMN,IAAI,GAAG,MAAMC,KAAK,CAAE,+BAA8BK,OAAO,CAACS,EAAG,EAA3C,EAA8C;AACpER,IAAAA,MAAM,EAAE,OAD4D;AAEpEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF2D;AAKpEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEK,MAAAA,SAAS,EAAEV,OAAO,CAACU;AAArB,KAAf;AAL8D,GAA9C,CAAxB;;AAQA,MAAIhB,IAAI,CAACE,EAAT,EAAa;AACX,UAAMW,IAAI,GAAG,MAAMb,IAAI,CAACI,IAAL,EAAnB;AACA,WAAO;AAAES,MAAAA;AAAF,KAAP;AACD;AACF,CAfgD,CAA5C;AAkBP,OAAO,MAAMI,SAAS,GAAGnB,WAAW,CAAC;AACnCoB,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE,EAFqB;AAGnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdT,QAAAA,EAAE,EAAEU,IAAI,CAACC,GAAL,EADU;AAEdd,QAAAA,KAAK,EAAEW,MAAM,CAACjB,OAAP,CAAeM,KAFR;AAGdI,QAAAA,SAAS,EAAE;AAHG,OAAhB;AAKAM,MAAAA,KAAK,CAACK,IAAN,CAAWH,OAAX;AACD,KARO;AASRI,IAAAA,cAAc,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMM,KAAK,GAAGP,KAAK,CAACQ,SAAN,CAAiBjB,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYQ,MAAM,CAACjB,OAAP,CAAeS,EAArD,CAAd;AACAO,MAAAA,KAAK,CAACO,KAAD,CAAL,CAAab,SAAb,GAAyBO,MAAM,CAACjB,OAAP,CAAeU,SAAxC;AACD,KAZO;AAaRe,IAAAA,UAAU,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACU,MAAN,CAAcnB,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYQ,MAAM,CAACjB,OAAP,CAAeS,EAAlD,CAAP;AACD;AAfO,GAHyB;AAoBnCkB,EAAAA,aAAa,EAAE;AACb,KAAClC,aAAa,CAACmC,SAAf,GAA2B,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAC5CY,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,aAAOb,MAAM,CAACjB,OAAP,CAAeH,KAAtB;AACD,KAJY;AAKb,KAACE,YAAY,CAAC6B,SAAd,GAA0B,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACK,IAAN,CAAWJ,MAAM,CAACjB,OAAP,CAAeO,IAA1B;AACD,KAPY;AAQb,KAACC,mBAAmB,CAACoB,SAArB,GAAiC,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AACrD,YAAMM,KAAK,GAAGP,KAAK,CAACQ,SAAN,CACZjB,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYQ,MAAM,CAACjB,OAAP,CAAeO,IAAf,CAAoBE,EAD7B,CAAd;AAGAO,MAAAA,KAAK,CAACO,KAAD,CAAL,CAAab,SAAb,GAAyBO,MAAM,CAACjB,OAAP,CAAeO,IAAf,CAAoBG,SAA7C;AACA;AAbc;AApBoB,CAAD,CAA7B;AAqCP,OAAO,MAAM;AAAEK,EAAAA,OAAF;AAAWO,EAAAA,cAAX;AAA2BG,EAAAA;AAA3B,IAA0Cd,SAAS,CAACoB,OAA1D;AACP,eAAepB,SAAS,CAACqB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/getTodosAsync\",\r\n  async () => {\r\n    const resp = await fetch(\"http://localhost:7000/todos\");\r\n    if (resp.ok) {\r\n      const todos = await resp.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\n\r\nexport const addTodoAsync = createAsyncThunk(\r\n  \"todos/addTodoAsync\",\r\n  async (payload) => {\r\n    const resp = await fetch(\"http://localhost:7000/todos\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ title: payload.title }),\r\n    });\r\n\r\n    if (resp.ok) {\r\n      const todo = await resp.json();\r\n      return { todo };\r\n    }\r\n  }\r\n);\r\n\r\nexport const toggleCompleteAsync = createAsyncThunk(\r\n  \"todos/completeTodoAsync\",\r\n  async (payload) => {\r\n    const resp = await fetch(`http://localhost:7000/todos/${payload.id}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ completed: payload.completed }),\r\n    });\r\n\r\n    if (resp.ok) {\r\n      const todo = await resp.json();\r\n      return { todo };\r\n    }\r\n  }\r\n);\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      console.log(\"fetched data successfully...\");\r\n      return action.payload.todos;\r\n    },\r\n    [addTodoAsync.fulfilled]: (state, action) => {\r\n      state.push(action.payload.todo);\r\n    },\r\n    [toggleCompleteAsync.fulfilled]: (state, action) => {\r\n\t\t\tconst index = state.findIndex(\r\n\t\t\t\t(todo) => todo.id === action.payload.todo.id\r\n\t\t\t);\r\n\t\t\tstate[index].completed = action.payload.todo.completed;\r\n\t\t},\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}