{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const resp = await fetch(\"http://localhost:7000/todos\");\n\n  if (resp.ok) {\n    const todos = await resp.json();\n    return {\n      todos\n    };\n  }\n});\nexport const addTodoAsync = createAsyncThunk('todos/addTodoAsync', async payload => {\n  const resp = await fetch('http://localhost:7000/todos', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: payload.title\n    })\n  });\n\n  if (resp.ok) {\n    const todo = await resp.json();\n    return {\n      todo\n    };\n  }\n});\nexport const todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data...\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully...\");\n      return action.payload.todos;\n    },\n    [addTodoAsync.fulfilled]: (state, action) => {\n      state.push(action.payload.todo);\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/ngoctaucao/OneDrive/Desktop/projects/todolist-app/client/src/redux/todoSlice.js"],"names":["createAsyncThunk","createSlice","getTodosAsync","resp","fetch","ok","todos","json","addTodoAsync","payload","method","headers","body","JSON","stringify","title","todo","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","Date","now","completed","push","toggleComplete","index","findIndex","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,qBAD2C,EAE3C,YAAY;AACV,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAxB;;AACA,MAAID,IAAI,CAACE,EAAT,EAAa;AACX,UAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAL,EAApB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD;AACF,CAR0C,CAAtC;AAWP,OAAO,MAAME,YAAY,GAAGR,gBAAgB,CAC3C,oBAD2C,EAE3C,MAAOS,OAAP,IAAmB;AAClB,QAAMN,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACvDM,IAAAA,MAAM,EAAE,MAD+C;AAEvDC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR,KAF8C;AAKvDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,EAAEN,OAAO,CAACM;AAAjB,KAAf;AALiD,GAAhC,CAAxB;;AAQA,MAAIZ,IAAI,CAACE,EAAT,EAAa;AACZ,UAAMW,IAAI,GAAG,MAAMb,IAAI,CAACI,IAAL,EAAnB;AACA,WAAO;AAAES,MAAAA;AAAF,KAAP;AACA;AACD,CAf0C,CAArC;AAkBP,OAAO,MAAMC,SAAS,GAAGhB,WAAW,CAAC;AACnCiB,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE,EAFqB;AAGnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADU;AAEdZ,QAAAA,KAAK,EAAEQ,MAAM,CAACd,OAAP,CAAeM,KAFR;AAGda,QAAAA,SAAS,EAAE;AAHG,OAAhB;AAKAN,MAAAA,KAAK,CAACO,IAAN,CAAWL,OAAX;AACD,KARO;AASRM,IAAAA,cAAc,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMQ,KAAK,GAAGT,KAAK,CAACU,SAAN,CAAiBhB,IAAD,IAAUA,IAAI,CAACS,EAAL,KAAYF,MAAM,CAACd,OAAP,CAAegB,EAArD,CAAd;AACAH,MAAAA,KAAK,CAACS,KAAD,CAAL,CAAaH,SAAb,GAAyBL,MAAM,CAACd,OAAP,CAAemB,SAAxC;AACD,KAZO;AAaRK,IAAAA,UAAU,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACY,MAAN,CAAclB,IAAD,IAAUA,IAAI,CAACS,EAAL,KAAYF,MAAM,CAACd,OAAP,CAAegB,EAAlD,CAAP;AACD;AAfO,GAHyB;AAoBnCU,EAAAA,aAAa,EAAE;AACb,KAACjC,aAAa,CAACkC,OAAf,GAAyB,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC1Cc,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,KAHY;AAIb,KAACpC,aAAa,CAACqC,SAAf,GAA2B,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AAC5Cc,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,aAAOf,MAAM,CAACd,OAAP,CAAeH,KAAtB;AACD,KAPY;AAQb,KAACE,YAAY,CAAC+B,SAAd,GAA0B,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACO,IAAN,CAAWN,MAAM,CAACd,OAAP,CAAeO,IAA1B;AACA;AAVc;AApBoB,CAAD,CAA7B;AAmCP,OAAO,MAAM;AAAEK,EAAAA,OAAF;AAAWS,EAAAA,cAAX;AAA2BG,EAAAA;AAA3B,IAA0ChB,SAAS,CAACuB,OAA1D;AACP,eAAevB,SAAS,CAACwB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/getTodosAsync\",\r\n  async () => {\r\n    const resp = await fetch(\"http://localhost:7000/todos\");\r\n    if (resp.ok) {\r\n      const todos = await resp.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\n\r\nexport const addTodoAsync = createAsyncThunk(\r\n\t'todos/addTodoAsync',\r\n\tasync (payload) => {\r\n\t\tconst resp = await fetch('http://localhost:7000/todos', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({ title: payload.title }),\r\n\t\t});\r\n\r\n\t\tif (resp.ok) {\r\n\t\t\tconst todo = await resp.json();\r\n\t\t\treturn { todo };\r\n\t\t}\r\n\t}\r\n);\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getTodosAsync.pending]: (state, action) => {\r\n      console.log(\"fetching data...\");\r\n    },\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      console.log(\"fetched data successfully...\");\r\n      return action.payload.todos;\r\n    },\r\n    [addTodoAsync.fulfilled]: (state, action) => {\r\n\t\t\tstate.push(action.payload.todo);\r\n\t\t},\r\n    \r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}