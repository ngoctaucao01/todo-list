{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const getTodosAsync = createAsyncThunk('todos/getTodosAsync', async () => {\n  const resp = await fetch('http://localhost:7000/todos');\n\n  if (resp.ok) {\n    const todos = await resp.json();\n    return {\n      todos\n    };\n  }\n});\nexport const todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [{\n    id: 1,\n    title: \"todo1\",\n    completed: false\n  }, {\n    id: 2,\n    title: \"todo2\",\n    completed: false\n  }, {\n    id: 3,\n    title: \"todo3\",\n    completed: true\n  }],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/ngoctaucao/OneDrive/Desktop/projects/todolist-app/client/src/redux/todoSlice.js"],"names":["createAsyncThunk","createSlice","getTodosAsync","resp","fetch","ok","todos","json","todoSlice","name","initialState","id","title","completed","reducers","addTodo","state","action","newTodo","Date","now","payload","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC5C,qBAD4C,EAE5C,YAAY;AACX,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAxB;;AACA,MAAID,IAAI,CAACE,EAAT,EAAa;AACZ,UAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAL,EAApB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACA;AACD,CAR2C,CAAtC;AAWP,OAAO,MAAME,SAAS,GAAGP,WAAW,CAAC;AACnCQ,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,SAAS,EAAE;AAApC,GADY,EAEZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,SAAS,EAAE;AAApC,GAFY,EAGZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,SAAS,EAAE;AAApC,GAHY,CAFqB;AAOnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdP,QAAAA,EAAE,EAAEQ,IAAI,CAACC,GAAL,EADU;AAEdR,QAAAA,KAAK,EAAEK,MAAM,CAACI,OAAP,CAAeT,KAFR;AAGdC,QAAAA,SAAS,EAAE;AAHG,OAAhB;AAKAG,MAAAA,KAAK,CAACM,IAAN,CAAWJ,OAAX;AACD,KARO;AASRK,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMO,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACf,EAAL,KAAYM,MAAM,CAACI,OAAP,CAAeV,EAArD,CAAd;AACAK,MAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaX,SAAb,GAAyBI,MAAM,CAACI,OAAP,CAAeR,SAAxC;AACD,KAZO;AAaRc,IAAAA,UAAU,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACY,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACf,EAAL,KAAYM,MAAM,CAACI,OAAP,CAAeV,EAAlD,CAAP;AACD;AAfO;AAPyB,CAAD,CAA7B;AA0BP,OAAO,MAAM;AAAEI,EAAAA,OAAF;AAAWQ,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0CnB,SAAS,CAACqB,OAA1D;AACP,eAAerB,SAAS,CAACsB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n\t'todos/getTodosAsync',\r\n\tasync () => {\r\n\t\tconst resp = await fetch('http://localhost:7000/todos');\r\n\t\tif (resp.ok) {\r\n\t\t\tconst todos = await resp.json();\r\n\t\t\treturn { todos };\r\n\t\t}\r\n\t}\r\n);\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [\r\n    { id: 1, title: \"todo1\", completed: false },\r\n    { id: 2, title: \"todo2\", completed: false },\r\n    { id: 3, title: \"todo3\", completed: true },\r\n  ],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}