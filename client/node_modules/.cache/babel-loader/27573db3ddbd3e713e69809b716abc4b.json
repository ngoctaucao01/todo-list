{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const resp = await fetch(\"http://localhost:7000/todos\");\n\n  if (resp.ok) {\n    const todos = await resp.json();\n    return {\n      todos\n    };\n  }\n});\nexport const todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data...\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully...\");\n      return action.payload.todos;\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/ngoctaucao/OneDrive/Desktop/projects/todolist-app/client/src/redux/todoSlice.js"],"names":["createAsyncThunk","createSlice","getTodosAsync","resp","fetch","ok","todos","json","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","Date","now","title","payload","completed","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,qBAD2C,EAE3C,YAAY;AACV,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAxB;;AACA,MAAID,IAAI,CAACE,EAAT,EAAa;AACX,UAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAL,EAApB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD;AACF,CAR0C,CAAtC;AAWP,OAAO,MAAME,SAAS,GAAGP,WAAW,CAAC;AACnCQ,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE,EAFqB;AAGnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADU;AAEdC,QAAAA,KAAK,EAAEL,MAAM,CAACM,OAAP,CAAeD,KAFR;AAGdE,QAAAA,SAAS,EAAE;AAHG,OAAhB;AAKAR,MAAAA,KAAK,CAACS,IAAN,CAAWP,OAAX;AACD,KARO;AASRQ,IAAAA,cAAc,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMU,KAAK,GAAGX,KAAK,CAACY,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYF,MAAM,CAACM,OAAP,CAAeJ,EAArD,CAAd;AACAH,MAAAA,KAAK,CAACW,KAAD,CAAL,CAAaH,SAAb,GAAyBP,MAAM,CAACM,OAAP,CAAeC,SAAxC;AACD,KAZO;AAaRM,IAAAA,UAAU,EAAE,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACe,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYF,MAAM,CAACM,OAAP,CAAeJ,EAAlD,CAAP;AACD;AAfO,GAHyB;AAoBnCa,EAAAA,aAAa,EAAE;AACb,KAAC3B,aAAa,CAAC4B,OAAf,GAAyB,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AAC1CiB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,KAHY;AAIb,KAAC9B,aAAa,CAAC+B,SAAf,GAA2B,CAACpB,KAAD,EAAQC,MAAR,KAAmB;AAC5CiB,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,aAAOlB,MAAM,CAACM,OAAP,CAAed,KAAtB;AACD;AAPY;AApBoB,CAAD,CAA7B;AA+BP,OAAO,MAAM;AAAEM,EAAAA,OAAF;AAAWW,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0CnB,SAAS,CAAC0B,OAA1D;AACP,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/getTodosAsync\",\r\n  async () => {\r\n    const resp = await fetch(\"http://localhost:7000/todos\");\r\n    if (resp.ok) {\r\n      const todos = await resp.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getTodosAsync.pending]: (state, action) => {\r\n      console.log(\"fetching data...\");\r\n    },\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      console.log(\"fetched data successfully...\");\r\n      return action.payload.todos;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}